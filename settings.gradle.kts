/*
 * This file was generated by the Gradle 'init' task.
 *
 * The settings file is used to specify which projects to include in your build.
 *
 * Detailed information about configuring a multi-project build in Gradle can be found
 * in the user manual at https://docs.gradle.org/7.4.1/userguide/multi_project_builds.html
 * This project uses @Incubating APIs which are subject to change.
 */

rootProject.name = "hexagonal-http4k-koin"

includeTree("root") {
    module("app")
    dir("adapter-driver") {
        module("web-impl")
    }

    dir("domain") {
        module("domain-model")
        module("domain-api")
        module("domain-impl")
        dir("domain-spi") {
            module("domain-persistence-spi")
            module("domain-thirdparty-spi")
        }
    }

    dir("adapter-driven") {
        module("persistence-jooq")
        module("thirdparty-http")
    }
}

data class IncludeTree(
    private val path: String,
    private val parentProject: String
) {
    fun dir(path: String, block: IncludeTree.() -> Unit) {
        val nestedPath = "${this.path}/$path"
        includeTree(nestedPath, parentProject, block)
    }

    fun module(name: String, block: IncludeTree.() -> Unit = {}) {
        val projectName = "$parentProject:$name"
        val projectDir = "$path/$name"

        include(projectName)
        project(projectName).also {
            it.projectDir = file(projectDir)

            it.buildFile.takeUnless(File::exists)
                ?.also { buildFile ->
                    buildFile.parentFile.mkdirs()
                    file("${buildFile.absolutePath}.kts").createNewFile()
                }
        }
        includeTree(projectDir, projectName, block)
    }
}

fun includeTree(path: String = ".", parentProject: String = "", block: IncludeTree.() -> Unit) {
    IncludeTree(path, parentProject).block()
}
